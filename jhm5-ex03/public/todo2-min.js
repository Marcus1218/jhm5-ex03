class KVReminderManager{constructor(){this.reminders=[];this.currentFilter='all';this.currentSort='created-desc';this.searchQuery='';this.selectedItems=new Set();this.currentTheme=localStorage.getItem('theme')||'light';this.apiBase='/api/todos';this.init()}async init(){this.applyTheme();this.bindEvents();await this.loadRemindersFromKV();this.renderReminders();this.updateStats()}async apiCall(url,options={}){this.setLoading(true);try{const response=await fetch(url,{headers:{'Content-Type':'application/json',...options.headers},...options});if(!response.ok)throw new Error(`API Error: ${response.status}`);const data=await response.text();return data?JSON.parse(data):null}catch(error){console.error('API Error:',error);this.setSyncStatus('error');throw error}finally{this.setLoading(false)}}async loadRemindersFromKV(){try{this.reminders=await this.apiCall(this.apiBase);this.setSyncStatus('synced')}catch(error){console.error('Load error:',error);this.setSyncStatus('error');this.reminders=[]}}setLoading(loading){const indicator=document.getElementById('loadingIndicator');if(indicator)indicator.style.display=loading?'flex':'none'}setSyncStatus(status){const statusElement=document.getElementById('syncStatus');if(statusElement){switch(status){case 'synced':statusElement.innerHTML='<i class="fas fa-check-circle"></i> 已同步';statusElement.className='sync-success';break;case 'syncing':statusElement.innerHTML='<i class="fas fa-sync-alt fa-spin"></i> 同步中';statusElement.className='sync-loading';break;case 'error':statusElement.innerHTML='<i class="fas fa-exclamation-triangle"></i> 同步失敗';statusElement.className='sync-error';break}}}bindEvents(){document.getElementById('addBtn').addEventListener('click',()=>this.addReminder());document.getElementById('reminderInput').addEventListener('keypress',e=>{if(e.key==='Enter')this.addReminder()});document.querySelectorAll('.filter-btn').forEach(btn=>{btn.addEventListener('click',e=>this.setFilter(e.target.dataset.filter))});document.getElementById('searchInput').addEventListener('input',e=>{this.searchQuery=e.target.value;this.renderReminders()});document.getElementById('sortSelect').addEventListener('change',e=>{this.currentSort=e.target.value;this.renderReminders()});document.getElementById('selectAllCheckbox').addEventListener('change',e=>this.toggleSelectAll(e.target.checked));document.getElementById('bulkCompleteBtn').addEventListener('click',()=>this.bulkComplete());document.getElementById('bulkDeleteBtn').addEventListener('click',()=>this.bulkDelete());document.getElementById('themeToggle').addEventListener('click',()=>this.toggleTheme());document.getElementById('exportBtn').addEventListener('click',()=>this.exportData());document.getElementById('importBtn').addEventListener('click',()=>document.getElementById('importInput').click());document.getElementById('importInput').addEventListener('change',e=>this.importData(e.target.files[0]));document.getElementById('syncBtn').addEventListener('click',()=>this.syncData());document.querySelectorAll('.close').forEach(closeBtn=>{closeBtn.addEventListener('click',e=>{const modal=e.target.closest('.modal');if(modal)modal.style.display='none'})});window.addEventListener('click',e=>{if(e.target.classList.contains('modal'))e.target.style.display='none'})}async addReminder(){const input=document.getElementById('reminderInput');const dueDateInput=document.getElementById('dueDateInput');const prioritySelect=document.getElementById('prioritySelect');const categorySelect=document.getElementById('categorySelect');const text=input.value.trim();if(!text){input.focus();return}const reminder={text:text,completed:false,priority:prioritySelect.value,category:categorySelect.value,dueDate:dueDateInput.value||null,createdAt:new Date().toISOString(),tags:this.extractTags(text)};try{const savedReminder=await this.apiCall(this.apiBase,{method:'POST',body:JSON.stringify(reminder)});this.reminders.push(savedReminder);input.value='';dueDateInput.value='';prioritySelect.value='medium';categorySelect.value='personal';this.renderReminders();this.updateStats();this.showNotification('提醒已成功新增！','success')}catch(error){this.showNotification('新增提醒失敗，請稍後再試','error')}}async toggleReminder(id){const reminder=this.reminders.find(r=>r.id===id);if(!reminder)return;const updates={completed:!reminder.completed,completedAt:!reminder.completed?new Date().toISOString():null};try{const updatedReminder=await this.apiCall(`${this.apiBase}/${id}`,{method:'PUT',body:JSON.stringify(updates)});Object.assign(reminder,updatedReminder);this.renderReminders();this.updateStats();this.showNotification(reminder.completed?'任務已完成！':'任務已標記為未完成','success')}catch(error){this.showNotification('更新失敗，請稍後再試','error')}}async deleteReminder(id){if(!confirm('確定要刪除這個提醒嗎？'))return;try{await this.apiCall(`${this.apiBase}/${id}`,{method:'DELETE'});this.reminders=this.reminders.filter(r=>r.id!==id);this.renderReminders();this.updateStats();this.showNotification('提醒已刪除','success')}catch(error){this.showNotification('刪除失敗，請稍後再試','error')}}async bulkComplete(){if(this.selectedItems.size===0)return;const ids=Array.from(this.selectedItems);const updates={completed:true,completedAt:new Date().toISOString()};try{await this.apiCall(`${this.apiBase}/bulk`,{method:'PUT',body:JSON.stringify({ids,updates})});this.reminders.forEach(reminder=>{if(ids.includes(reminder.id))Object.assign(reminder,updates)});this.selectedItems.clear();this.updateBulkActionButtons();this.renderReminders();this.updateStats();this.showNotification(`已完成 ${ids.length} 個任務`,'success')}catch(error){this.showNotification('批量操作失敗，請稍後再試','error')}}async bulkDelete(){if(this.selectedItems.size===0)return;if(!confirm(`確定要刪除選中的 ${this.selectedItems.size} 個提醒嗎？`))return;const ids=Array.from(this.selectedItems);try{await this.apiCall(`${this.apiBase}/bulk`,{method:'DELETE',body:JSON.stringify({ids})});this.reminders=this.reminders.filter(r=>!ids.includes(r.id));this.selectedItems.clear();this.updateBulkActionButtons();this.renderReminders();this.updateStats();this.showNotification(`已刪除 ${ids.length} 個提醒`,'success')}catch(error){this.showNotification('批量刪除失敗，請稍後再試','error')}}async syncData(){this.setSyncStatus('syncing');try{await this.loadRemindersFromKV();this.renderReminders();this.updateStats();this.showNotification('資料同步成功！','success')}catch(error){this.showNotification('同步失敗，請檢查網路連線','error')}}extractTags(text){const tagRegex=/#(\w+)/g;const tags=[];let match;while((match=tagRegex.exec(text))!==null)tags.push(match[1]);return tags}setFilter(filter){this.currentFilter=filter;document.querySelectorAll('.filter-btn').forEach(btn=>{btn.classList.toggle('active',btn.dataset.filter===filter)});this.renderReminders()}getFilteredReminders(){let filtered=this.reminders.filter(reminder=>{if(this.searchQuery&&!reminder.text.toLowerCase().includes(this.searchQuery.toLowerCase()))return false;switch(this.currentFilter){case 'completed':return reminder.completed;case 'pending':return!reminder.completed;case 'overdue':return!reminder.completed&&reminder.dueDate&&new Date(reminder.dueDate)<new Date();case 'today':if(!reminder.dueDate)return false;return new Date(reminder.dueDate).toDateString()===new Date().toDateString();case 'high':return reminder.priority==='high';case 'work':case 'personal':case 'study':case 'health':case 'other':return reminder.category===this.currentFilter;default:return true}});switch(this.currentSort){case 'created-asc':filtered.sort((a,b)=>new Date(a.createdAt)-new Date(b.createdAt));break;case 'created-desc':filtered.sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt));break;case 'due-asc':filtered.sort((a,b)=>{if(!a.dueDate&&!b.dueDate)return 0;if(!a.dueDate)return 1;if(!b.dueDate)return-1;return new Date(a.dueDate)-new Date(b.dueDate)});break;case 'priority-desc':const priorityOrder={high:3,medium:2,low:1};filtered.sort((a,b)=>priorityOrder[b.priority]-priorityOrder[a.priority]);break}return filtered}renderReminders(){const container=document.getElementById('remindersList');const filtered=this.getFilteredReminders();if(filtered.length===0){container.innerHTML=`<div class="empty-state"><i class="fas fa-cloud-upload-alt"></i><h3>${this.searchQuery?'沒有找到匹配的提醒':'雲端待辦事項'}</h3><p>${this.searchQuery?'試試其他關鍵字':'您的待��事項將儲存在 Cloudflare KV 中，可在任何裝置存取'}</p></div>`;return}container.innerHTML=filtered.map(reminder=>this.renderReminderItem(reminder)).join('');this.setupReminderEvents()}renderReminderItem(reminder){const dueDate=reminder.dueDate?new Date(reminder.dueDate):null;const isOverdue=dueDate&&dueDate<new Date()&&!reminder.completed;const isToday=dueDate&&dueDate.toDateString()===new Date().toDateString();return`<div class="reminder-item ${reminder.completed?'completed':''} ${isOverdue?'overdue':''} ${isToday?'today':''}" data-id="${reminder.id}"><div class="reminder-content"><input type="checkbox" class="reminder-checkbox bulk-select" data-id="${reminder.id}" ${this.selectedItems.has(reminder.id)?'checked':''}><input type="checkbox" class="reminder-toggle" ${reminder.completed?'checked':''}><div class="reminder-text"><span class="text">${this.highlightTags(reminder.text)}</span><div class="reminder-meta"><span class="priority priority-${reminder.priority}">${this.getPriorityText(reminder.priority)}</span><span class="category category-${reminder.category}">${this.getCategoryText(reminder.category)}</span>${dueDate?`<span class="due-date ${isOverdue?'overdue':''}">${this.formatDueDate(dueDate)}</span>`:''}${reminder.tags&&reminder.tags.length>0?`<span class="tags">${reminder.tags.map(tag=>`#${tag}`).join(' ')}</span>`:''}</div></div></div><div class="reminder-actions"><button class="action-btn edit-btn" title="編輯"><i class="fas fa-edit"></i></button><button class="action-btn delete-btn" title="刪除"><i class="fas fa-trash"></i></button></div></div>`}setupReminderEvents(){document.querySelectorAll('.reminder-toggle').forEach(checkbox=>{checkbox.addEventListener('change',e=>{const id=e.target.closest('.reminder-item').dataset.id;this.toggleReminder(id)})});document.querySelectorAll('.delete-btn').forEach(btn=>{btn.addEventListener('click',e=>{const id=e.target.closest('.reminder-item').dataset.id;this.deleteReminder(id)})});document.querySelectorAll('.bulk-select').forEach(checkbox=>{checkbox.addEventListener('change',e=>{const id=e.target.dataset.id;if(e.target.checked)this.selectedItems.add(id);else this.selectedItems.delete(id);this.updateBulkActionButtons()})})}updateBulkActionButtons(){const hasSelected=this.selectedItems.size>0;document.getElementById('bulkCompleteBtn').disabled=!hasSelected;document.getElementById('bulkDeleteBtn').disabled=!hasSelected;const selectAllCheckbox=document.getElementById('selectAllCheckbox');selectAllCheckbox.checked=hasSelected&&this.selectedItems.size===this.getFilteredReminders().length;selectAllCheckbox.indeterminate=hasSelected&&this.selectedItems.size<this.getFilteredReminders().length}toggleSelectAll(selectAll){const filtered=this.getFilteredReminders();if(selectAll)filtered.forEach(reminder=>this.selectedItems.add(reminder.id));else this.selectedItems.clear();document.querySelectorAll('.bulk-select').forEach(checkbox=>{checkbox.checked=selectAll});this.updateBulkActionButtons()}updateStats(){const total=this.reminders.length;const completed=this.reminders.filter(r=>r.completed).length;const pending=total-completed;const overdue=this.reminders.filter(r=>!r.completed&&r.dueDate&&new Date(r.dueDate)<new Date()).length;document.getElementById('totalCount').textContent=total;document.getElementById('completedCount').textContent=completed;document.getElementById('pendingCount').textContent=pending;document.getElementById('overdueCount').textContent=overdue}highlightTags(text){return text.replace(/#(\w+)/g,'<span class="tag-highlight">#$1</span>')}getPriorityText(priority){const priorities={high:'高',medium:'中',low:'低'};return priorities[priority]||priority}getCategoryText(category){const categories={personal:'個人',work:'工作',study:'學習',health:'健康',other:'其他'};return categories[category]||category}formatDueDate(date){const now=new Date();const diffTime=date-now;const diffDays=Math.ceil(diffTime/(1000*60*60*24));if(diffDays===0)return'今天';if(diffDays===1)return'明天';if(diffDays===-1)return'昨天';if(diffDays>1&&diffDays<=7)return`${diffDays}天後`;if(diffDays<-1)return`${Math.abs(diffDays)}天前`;return date.toLocaleDateString('zh-TW')}showNotification(message,type='info'){const notification=document.createElement('div');notification.className=`notification ${type}`;notification.innerHTML=`<i class="fas fa-${type==='success'?'check-circle':type==='error'?'exclamation-circle':'info-circle'}"></i><span>${message}</span>`;document.body.appendChild(notification);setTimeout(()=>notification.classList.add('show'),100);setTimeout(()=>{notification.classList.remove('show');setTimeout(()=>notification.remove(),300)},3000)}toggleTheme(){this.currentTheme=this.currentTheme==='light'?'dark':'light';localStorage.setItem('theme',this.currentTheme);this.applyTheme()}applyTheme(){document.body.className=this.currentTheme+'-theme';const themeIcon=document.querySelector('#themeToggle i');themeIcon.className=this.currentTheme==='light'?'fas fa-moon':'fas fa-sun'}exportData(){const data={reminders:this.reminders,exportDate:new Date().toISOString(),version:'2.0-kv'};const blob=new Blob([JSON.stringify(data,null,2)],{type:'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=`reminders-kv-${new Date().toISOString().split('T')[0]}.json`;a.click();URL.revokeObjectURL(url);this.showNotification('資料匯出成功！','success')}async importData(file){if(!file)return;try{const text=await file.text();const data=JSON.parse(text);if(!data.reminders||!Array.isArray(data.reminders)){throw new Error('無效的資料格式')}if(confirm(`確定要匯入 ${data.reminders.length} 個提醒嗎？這將會與雲端資料合併。`)){for(const reminder of data.reminders){try{const savedReminder=await this.apiCall(this.apiBase,{method:'POST',body:JSON.stringify(reminder)});this.reminders.push(savedReminder)}catch(error){console.error('匯入提醒失敗:',reminder,error)}}this.renderReminders();this.updateStats();this.showNotification('資料匯入成功！','success')}}catch(error){console.error('匯入錯誤:',error);this.showNotification('匯入失敗，請檢查檔案格式','error')}}}document.addEventListener('DOMContentLoaded',()=>{window.reminderManager=new KVReminderManager()});

